{"version":3,"sources":["App.js","reducer.js","index.js"],"names":["GET_JOKE_LIST","gql","GET_JOKE","App","useState","jokeCategory","setJokeCategory","count","useSelector","state","dispatch","useDispatch","useQuery","category","data","loadingList","loading","errorList","error","refetch","useLazyQuery","getJoke","jokes","loadingJoke","errorJoke","selectedText","className","map","onClick","type","id","name","variables","joke","initialState","actionType","reducer","action","cache","InMemoryCache","link","HttpLink","uri","client","Apolloclient","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sNAMMA,EAAgBC,cAAH,kFASbC,EAAWD,cAAH,sGAsFCE,MA9Ef,WAAe,MAK2BC,mBAAS,IALpC,mBAKNC,EALM,KAKQC,EALR,KAQPC,EAAQC,aAAY,SAACC,GAAD,OAAWA,KAC/BC,EAAWC,cATJ,EAkBTC,mBAASZ,GAJLa,EAdK,EAcXC,KACSC,EAfE,EAeXC,QACOC,EAhBI,EAgBXC,MACAC,EAjBW,EAiBXA,QAjBW,EAyBTC,uBAAalB,GAzBJ,mBAuBXmB,EAvBW,YAwBHC,EAxBG,EAwBTR,KAAsBS,EAxBb,EAwBIP,QAA6BQ,EAxBjC,EAwB0BN,MAIvC,GAAIH,EAAa,MAAO,aACxB,GAAIE,EAAW,OAAO,sDACtB,IAAKJ,EAAU,OAAO,0CAItB,IAAMY,EAAY,uBAAmBlB,EAAnB,4CAA4DF,EAA5D,gBAElB,OACE,eAAC,WAAD,WACE,iCACE,8DAEF,iCACE,oBAAIqB,UAAU,YAAd,SACGb,GACCA,EAASS,OACTT,EAASS,MAAMK,KAAI,SAACd,GAAD,OACjB,oBACEa,UAAU,WACVE,QAAS,WAEPT,IACAT,EAAS,CAAEmB,KAAM,aACjB,IAAMC,EAAKjB,EAASkB,KAIpB,OAHAzB,EAAgBO,EAASkB,MACzBV,EAAQ,CAAEW,UAAW,CAAEF,QAEnBP,EAAoB,aACpBC,EAAkB,mDACjBF,OAAL,EAAmB,2CAZvB,SAgBGT,EAASkB,MAFLlB,EAASkB,WAMtB,sBAAKL,UAAU,QAAf,UAEGJ,GAASA,EAAMW,MAAQX,EAAMW,KAAKF,MACjC,qBAAIL,UAAU,OAAd,UAAsBJ,EAAMW,KAAKF,KAAjC,OAEF,6BAAsB,KAAjB1B,EAAsBoB,EAAe,e,QC7F9CS,EACG,EAKHC,EACE,WAaOC,EATC,WAAyC,IAAxC3B,EAAuC,uDAA/ByB,EAAoBG,EAAW,uCACtD,OAAQA,EAAOR,MACb,KAAKM,EACH,OAAO1B,EAAQ,EACjB,QACE,OAAOA,I,wBCLP6B,EAAQ,IAAIC,IACZC,EAAO,IAAIC,IAAS,CACxBC,IAAK,aAEDC,EAAS,IAAIC,IAAa,CAC9BN,QACAE,SAIIK,EAAQC,YACZV,EACAW,OAAOC,8BAAgCD,OAAOC,gCAGhDC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,iBAAD,CAAgBR,OAAQA,EAAxB,SACE,cAAC,IAAD,CAAUE,MAAOA,EAAjB,SACE,cAAC,EAAD,UAINO,SAASC,eAAe,W","file":"static/js/main.4574b5e8.chunk.js","sourcesContent":["import { Fragment, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport \"./App.css\";\nimport { gql, useLazyQuery, useQuery } from \"@apollo/client\";\n\n//fetchin category list\nconst GET_JOKE_LIST = gql`\n  query jokes {\n    jokes {\n      name\n    }\n  }\n`;\n\n//fetching individual joke by category selected\nconst GET_JOKE = gql`\n  query joke($id: String) {\n    joke(id: $id) {\n      name\n    }\n  }\n`;\n\nfunction App() {\n  //main function\n\n  //usestate hooks for saving category\n\n  const [jokeCategory, setJokeCategory] = useState(\"\");\n\n  //react-redux initialisation\n  const count = useSelector((state) => state);\n  const dispatch = useDispatch();\n\n  //initializing of opollo client states\n  //for categories\n  const {\n    data: category,\n    loading: loadingList,\n    error: errorList,\n    refetch,\n  } = useQuery(GET_JOKE_LIST);\n\n  //for individual fetched joke\n\n  const [\n    getJoke,\n    { data: jokes, loading: loadingJoke, error: errorJoke },\n  ] = useLazyQuery(GET_JOKE);\n\n  //for categories first load or refresh\n  if (loadingList) return \"Loading...\";\n  if (errorList) return <p>ERROR loadig category</p>;\n  if (!category) return <p>Not found</p>;\n\n  //text after selected joke category\n  //state management tool react-reduz for counting clicks\n  const selectedText = `You selected ${count} chuck norris joke.This is about ${jokeCategory}ðŸš€`;\n\n  return (\n    <Fragment>\n      <header>\n        <h1>Fundo Full Stack Challenge</h1>\n      </header>\n      <main>\n        <ul className=\"side-menu\">\n          {category &&\n            category.jokes &&\n            category.jokes.map((category) => (\n              <li\n                className=\"category\"\n                onClick={() => {\n                  //onClick get joke according to category selected\n                  refetch();\n                  dispatch({ type: \"ADD_JOKE\" });\n                  const id = category.name;\n                  setJokeCategory(category.name);\n                  getJoke({ variables: { id } });\n\n                  if (loadingJoke) return \"Loading...\";\n                  if (errorJoke) return <p>ERROR loading joke</p>;\n                  if (!jokes) return <p>Not found</p>;\n                }}\n                key={category.name}\n              >\n                {category.name}\n              </li>\n            ))}\n        </ul>\n        <div className=\"jokes\">\n          {/* show joke after clicking a category */}\n          {jokes && jokes.joke && jokes.joke.name && (\n            <h2 className=\"joke\">{jokes.joke.name} </h2>\n          )}\n          <li>{jokeCategory !== \"\" ? selectedText : \"\"}</li>\n        </div>\n      </main>\n    </Fragment>\n  );\n}\n\nexport default App;\n","//initial state\r\nconst initialState = {\r\n  count: 0,\r\n};\r\n\r\n//actions\r\n\r\nconst actionType = {\r\n  type: \"ADD_JOKE\",\r\n};\r\n\r\n//reducer\r\nconst reducer = (state = initialState.count, action) => {\r\n  switch (action.type) {\r\n    case actionType.type:\r\n      return state + 1;\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport reducer from \"./reducer\";\nimport Apolloclient from \"apollo-client\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { HttpLink } from \"apollo-link-http\";\n\n//caching data and fetching on server side\nconst cache = new InMemoryCache();\nconst link = new HttpLink({\n  uri: \"/graphql\",\n});\nconst client = new Apolloclient({\n  cache,\n  link,\n});\n\n//react-redux store passing root reducer and dev tools to help vitualize\nconst store = createStore(\n  reducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}